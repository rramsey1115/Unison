// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Unison.Data;

#nullable disable

namespace Unison.Migrations
{
    [DbContext(typeof(UnisonDbContext))]
    partial class UnisonDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Complete")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MusicianId")
                        .HasColumnType("integer");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MusicianId");

                    b.HasIndex("SessionId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Assignments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Complete = true,
                            DueDate = new DateTime(2024, 2, 1, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            MusicianId = 3,
                            SessionId = 6,
                            TeacherId = 1
                        },
                        new
                        {
                            Id = 2,
                            Complete = true,
                            DueDate = new DateTime(2024, 2, 10, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            MusicianId = 4,
                            SessionId = 7,
                            TeacherId = 1
                        },
                        new
                        {
                            Id = 3,
                            Complete = false,
                            DueDate = new DateTime(2024, 2, 17, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            MusicianId = 4,
                            SessionId = 8,
                            TeacherId = 1
                        },
                        new
                        {
                            Id = 4,
                            Complete = false,
                            DueDate = new DateTime(2024, 2, 22, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            MusicianId = 8,
                            SessionId = 9,
                            TeacherId = 2
                        },
                        new
                        {
                            Id = 5,
                            Complete = false,
                            DueDate = new DateTime(2024, 3, 1, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            MusicianId = 9,
                            SessionId = 10,
                            TeacherId = 2
                        });
                });

            modelBuilder.Entity("Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Details = "Start a session with solid tonal development, can also be used as a warm-down",
                            Name = "Tonal Warm-Ups"
                        },
                        new
                        {
                            Id = 2,
                            Details = "Start a session getting technically warmed up, vocal chords, fingers, etc.",
                            Name = "Technical Warm-Ups"
                        },
                        new
                        {
                            Id = 3,
                            Details = "Fundamentals of musical development, scales in multiple forms, modes, ranges",
                            Name = "Scales"
                        },
                        new
                        {
                            Id = 4,
                            Details = "Isolated chords, arpeggios, voicings, etc.",
                            Name = "Chords/Arpeggios"
                        },
                        new
                        {
                            Id = 5,
                            Details = "Any techniques not tradtionally taught for producing sound on your instrument or voice",
                            Name = "Extended Techniques"
                        },
                        new
                        {
                            Id = 6,
                            Details = "Any activity to develop jazz, rock, pop, etc. improvisation",
                            Name = "Improvisation"
                        },
                        new
                        {
                            Id = 7,
                            Details = "Learn class jazz tunes, or songs needed for commercial gigs",
                            Name = "Tune/Song Learning"
                        },
                        new
                        {
                            Id = 8,
                            Details = "Sonatas, Concertos, Solos, etc. for your specific instrument or voice",
                            Name = "Solo Repertoire"
                        },
                        new
                        {
                            Id = 9,
                            Details = "Learn or pratice any chamber music pieces for upcoming gigs, recitals, etc.",
                            Name = "Chamber Music Repertoire"
                        },
                        new
                        {
                            Id = 10,
                            Details = "Essential for developing musicianship, technique, and musical literacy",
                            Name = "Etudes"
                        },
                        new
                        {
                            Id = 11,
                            Details = "Any variety of music you read down on the first try",
                            Name = "Sight-Reading"
                        },
                        new
                        {
                            Id = 12,
                            Details = "Specific well-known excerpts for you instrument from the symphonic repertoire",
                            Name = "Orchestral Excerpts"
                        },
                        new
                        {
                            Id = 13,
                            Details = "Learning full-length large ensemle pieces for upcoming concerts",
                            Name = "Large Ensemble Repertoire"
                        },
                        new
                        {
                            Id = 14,
                            Details = "Whatever keeps you playing!",
                            Name = "Fun"
                        },
                        new
                        {
                            Id = 15,
                            Details = "Anything which doesn't fit securely into a previous category",
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "Comment about music, saying very useful and meaningful things. Things a student could never think of on their own.",
                            SessionId = 1,
                            TeacherId = 1
                        },
                        new
                        {
                            Id = 2,
                            Body = "Comment about music, saying very useful and meaningful things. Things a student could never think of on their own.",
                            SessionId = 3,
                            TeacherId = 1
                        },
                        new
                        {
                            Id = 3,
                            Body = "Comment about music, saying very useful and meaningful things. Things a student could never think of on their own.",
                            SessionId = 5,
                            TeacherId = 1
                        },
                        new
                        {
                            Id = 4,
                            Body = "Comment about music, saying very useful and meaningful things. Things a student could never think of on their own.",
                            SessionId = 8,
                            TeacherId = 2
                        },
                        new
                        {
                            Id = 5,
                            Body = "Comment about music, saying very useful and meaningful things. Things a student could never think of on their own.",
                            SessionId = 9,
                            TeacherId = 2
                        });
                });

            modelBuilder.Entity("FavoriteSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MusicianId")
                        .HasColumnType("integer");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MusicianId");

                    b.HasIndex("SessionId");

                    b.ToTable("FavoriteSessions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MusicianId = 2,
                            SessionId = 1
                        },
                        new
                        {
                            Id = 2,
                            MusicianId = 2,
                            SessionId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            ConcurrencyStamp = "c996f026-ec11-480b-b528-d60d93576c7b",
                            Name = "Teacher",
                            NormalizedName = "teacher"
                        },
                        new
                        {
                            Id = "a171f807-e85e-46a5-ae04-f287122ede55",
                            ConcurrencyStamp = "a8cde0b2-5d6c-4ebd-a721-dfcb6cb72ee6",
                            Name = "Musician",
                            NormalizedName = "musician"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ae243d15-c379-4e47-8bf8-cc90e3ae7797",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEIECYDDEpWh3+jD3YgBhbPosSvgP1D13N2v3dnfP2gShsj+S9puiFZZGaUye09+P9A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e25bc5eb-ce77-47a3-95e1-77a9dd15b03c",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "e9fd3bbc-17a0-4ba7-857e-e6d695698548",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "287e18c6-70ec-4d05-b28e-24e67a3bba3c",
                            Email = "teacher1@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEAGPGiatHgcwZtbKZcuVT5W1pkGKCCFHRVsV2xutrjS/cE8aRBHiD5l7IS4nNPQUXQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3fb1ebfd-a06b-4dc5-a8f5-e08e1821ab84",
                            TwoFactorEnabled = false,
                            UserName = "Teacher2"
                        },
                        new
                        {
                            Id = "4342d71c-3d92-49ea-9f84-8f3412b65679",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a5ecc43-53cc-43cc-80bd-56ff0111969e",
                            Email = "teststudent1@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEN9eyz4Jf1ETBJXhxeMTBGlHMXOguodVHhGGj8Vsk6ZlA4olhhHabBACW2Rz8xrhMg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8910f0a5-9675-4334-bb50-cb47aea57124",
                            TwoFactorEnabled = false,
                            UserName = "TestStudent1"
                        },
                        new
                        {
                            Id = "33ab14e6-cca3-4fb4-84d7-99d45b1c9b05",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bcbb3116-e15e-47d2-9d60-7e7e47fe96d6",
                            Email = "teststudent2@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEE5mOxvMkwGmVqtPcm2W84mRT0vsaE53wXeKyAPpQzXB832OvNLe5T/mty9cQSwTTg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4f1a1b92-f270-4876-b6e5-81f2a8fcd0f2",
                            TwoFactorEnabled = false,
                            UserName = "TestStudent2"
                        },
                        new
                        {
                            Id = "b6d8aa7f-ae65-4feb-95ab-377d810bc270",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01080f95-b3f4-4c45-abd7-80ae54b9213f",
                            Email = "teststudent3@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAELVx6sUXhN065syE2+AR4NujKAyAjuK+IXh0cEhYbIhbDVnd8QHYWmwOgg1lB6pCcA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1fccc81a-d352-482b-876f-acf9dcd5e75f",
                            TwoFactorEnabled = false,
                            UserName = "TestStudent3"
                        },
                        new
                        {
                            Id = "7c8b955a-c256-4505-bf0f-468489633f5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3cc9c3de-d671-45ab-87fb-59f5d99d8d24",
                            Email = "teststudent4@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEEPoykr8ANvVisduWe5EoZmpPblwSvzPAagPQ4zO58P6e7Khqk66z4GRBo3AZRw4iQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ca7bd168-fac1-40bc-b80c-13dd5ccc3bbb",
                            TwoFactorEnabled = false,
                            UserName = "TestStudent4"
                        },
                        new
                        {
                            Id = "ad6fe687-1ebf-4ef4-9e10-4e23b483140c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b1e25ada-00eb-40b5-974d-2e6cf4557db1",
                            Email = "teststudent5@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAECd8KqKy3Lq514cq2lMMY09Jlp8vi7mpcU9m9KDIPGrCiRSHnBFeOc1hM519UKOoGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "30663dec-4ea8-4f09-a1c2-1ca033271053",
                            TwoFactorEnabled = false,
                            UserName = "TestStudent5"
                        },
                        new
                        {
                            Id = "b1df4873-5564-479b-94c0-172f799e820b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3d57d8fb-1899-4696-863b-1298cae9fe67",
                            Email = "teststudent6@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAECZ4ta8NPOlyuWXYpDy5I+JGPeUXNF9RNZomBmxkofscH5TlHx4URCa4cFMI9gRtQw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c9d0259a-b0c4-4daa-a3cd-82d743b8a22a",
                            TwoFactorEnabled = false,
                            UserName = "TestStudent6"
                        },
                        new
                        {
                            Id = "7e60e6dc-579e-43af-9b2a-b4fe5bb42407",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "abf5a6da-56ad-4f9b-b887-09d76311c1e2",
                            Email = "teststudent7@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEI8q7280FYjAq6OPY0+2YbpRVJLAklBo8+0n2Vj1J+S3d0FyGPqoD5JHL54phd/Erg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d17e2f96-ea35-4b22-bee4-4f7ff4172fff",
                            TwoFactorEnabled = false,
                            UserName = "TestStudent7"
                        },
                        new
                        {
                            Id = "a03371b3-edeb-4184-8917-14fa66adb89f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d63fa97c-48c3-4b96-b540-640e5d68a5e2",
                            Email = "teststudent8@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEAKgWQx83X0YKMJdQZUEwl08PMde/zYSQnRJlq1DB5/g8SUdwP80TLC9DpizBJFMFg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "689d7a5e-82cc-4a56-9811-46294a20e96f",
                            TwoFactorEnabled = false,
                            UserName = "TestStudent8"
                        },
                        new
                        {
                            Id = "a541cf62-3506-462f-8901-eee6d9d5145f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "568e3a0a-07ba-4735-9355-ab536f2292fa",
                            Email = "teststudent9@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEL0y3QvI/DppkJrPxFeQWla7y61O+2vheJBfOMRDnYf2LljfLjKXTYsNojqhLPTjXw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c7bb75bc-b8fd-4482-a63f-91120b992bf9",
                            TwoFactorEnabled = false,
                            UserName = "TestStudent9"
                        },
                        new
                        {
                            Id = "91a84af5-48ef-4bce-aa4e-7271d83d4d8c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "49747bd9-8448-43cb-b322-c523f2c1b61b",
                            Email = "teststudent10@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEG4SYSwunRKaqyslEFvrHXht3OHBr9M0zsnMRkb+MuRZTGJWEe68cs6nJcsh+QOmnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9724f7a4-2296-4fa1-8813-3569446c82ff",
                            TwoFactorEnabled = false,
                            UserName = "TestStudent10"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "e9fd3bbc-17a0-4ba7-857e-e6d695698548",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        },
                        new
                        {
                            UserId = "4342d71c-3d92-49ea-9f84-8f3412b65679",
                            RoleId = "a171f807-e85e-46a5-ae04-f287122ede55"
                        },
                        new
                        {
                            UserId = "33ab14e6-cca3-4fb4-84d7-99d45b1c9b05",
                            RoleId = "a171f807-e85e-46a5-ae04-f287122ede55"
                        },
                        new
                        {
                            UserId = "b6d8aa7f-ae65-4feb-95ab-377d810bc270",
                            RoleId = "a171f807-e85e-46a5-ae04-f287122ede55"
                        },
                        new
                        {
                            UserId = "7c8b955a-c256-4505-bf0f-468489633f5f",
                            RoleId = "a171f807-e85e-46a5-ae04-f287122ede55"
                        },
                        new
                        {
                            UserId = "ad6fe687-1ebf-4ef4-9e10-4e23b483140c",
                            RoleId = "a171f807-e85e-46a5-ae04-f287122ede55"
                        },
                        new
                        {
                            UserId = "b1df4873-5564-479b-94c0-172f799e820b",
                            RoleId = "a171f807-e85e-46a5-ae04-f287122ede55"
                        },
                        new
                        {
                            UserId = "7e60e6dc-579e-43af-9b2a-b4fe5bb42407",
                            RoleId = "a171f807-e85e-46a5-ae04-f287122ede55"
                        },
                        new
                        {
                            UserId = "a03371b3-edeb-4184-8917-14fa66adb89f",
                            RoleId = "a171f807-e85e-46a5-ae04-f287122ede55"
                        },
                        new
                        {
                            UserId = "a541cf62-3506-462f-8901-eee6d9d5145f",
                            RoleId = "a171f807-e85e-46a5-ae04-f287122ede55"
                        },
                        new
                        {
                            UserId = "91a84af5-48ef-4bce-aa4e-7271d83d4d8c",
                            RoleId = "a171f807-e85e-46a5-ae04-f287122ede55"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MusicianId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MusicianId");

                    b.ToTable("Sessions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCompleted = new DateTime(2024, 1, 3, 13, 11, 0, 0, DateTimeKind.Unspecified),
                            MusicianId = 5,
                            Notes = "Need to work on C# minor and m. 17-32 of my etudes. Did not have a good warm-up. Repertoire learned measures 122-197"
                        },
                        new
                        {
                            Id = 2,
                            DateCompleted = new DateTime(2024, 1, 9, 13, 11, 0, 0, DateTimeKind.Unspecified),
                            MusicianId = 3,
                            Notes = "Need to work on C# minor and m. 17-32 of my etudes. Did not have a good warm-up. Repertoire learned measures 122-197"
                        },
                        new
                        {
                            Id = 3,
                            DateCompleted = new DateTime(2024, 1, 12, 13, 11, 0, 0, DateTimeKind.Unspecified),
                            MusicianId = 4,
                            Notes = "Need to work on C# minor and m. 17-32 of my etudes. Did not have a good warm-up. Repertoire learned measures 122-197"
                        },
                        new
                        {
                            Id = 4,
                            DateCompleted = new DateTime(2024, 1, 14, 13, 11, 0, 0, DateTimeKind.Unspecified),
                            MusicianId = 5,
                            Notes = "Need to work on C# minor and m. 17-32 of my etudes. Did not have a good warm-up. Repertoire learned measures 122-197"
                        },
                        new
                        {
                            Id = 5,
                            DateCompleted = new DateTime(2024, 1, 15, 13, 11, 0, 0, DateTimeKind.Unspecified),
                            MusicianId = 4,
                            Notes = "Need to work on C# minor and m. 17-32 of my etudes. Did not have a good warm-up. Repertoire learned measures 122-197"
                        },
                        new
                        {
                            Id = 6,
                            DateCompleted = new DateTime(2024, 1, 17, 13, 11, 0, 0, DateTimeKind.Unspecified),
                            MusicianId = 3,
                            Notes = "Need to work on C# minor and m. 17-32 of my etudes. Did not have a good warm-up. Repertoire learned measures 122-197"
                        },
                        new
                        {
                            Id = 7,
                            DateCompleted = new DateTime(2024, 1, 18, 13, 11, 0, 0, DateTimeKind.Unspecified),
                            MusicianId = 7,
                            Notes = "Need to work on C# minor and m. 17-32 of my etudes. Did not have a good warm-up. Repertoire learned measures 122-197"
                        },
                        new
                        {
                            Id = 8,
                            MusicianId = 7,
                            Notes = "Need to work on C# minor and m. 17-32 of my etudes. Did not have a good warm-up. Repertoire learned measures 122-197"
                        },
                        new
                        {
                            Id = 9,
                            MusicianId = 10,
                            Notes = "Need to work on C# minor and m. 17-32 of my etudes. Did not have a good warm-up. Repertoire learned measures 122-197"
                        },
                        new
                        {
                            Id = 10,
                            MusicianId = 8,
                            Notes = "Need to work on C# minor and m. 17-32 of my etudes. Did not have a good warm-up. Repertoire learned measures 122-197"
                        });
                });

            modelBuilder.Entity("SessionActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("integer");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("SessionId");

                    b.ToTable("SessionActivities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityId = 9,
                            Duration = 20,
                            SessionId = 1
                        },
                        new
                        {
                            Id = 2,
                            ActivityId = 49,
                            Duration = 15,
                            SessionId = 1
                        },
                        new
                        {
                            Id = 3,
                            ActivityId = 57,
                            Duration = 15,
                            SessionId = 1
                        },
                        new
                        {
                            Id = 4,
                            ActivityId = 40,
                            Duration = 30,
                            SessionId = 1
                        },
                        new
                        {
                            Id = 5,
                            ActivityId = 30,
                            Duration = 10,
                            SessionId = 2
                        },
                        new
                        {
                            Id = 6,
                            ActivityId = 20,
                            Duration = 30,
                            SessionId = 2
                        },
                        new
                        {
                            Id = 7,
                            ActivityId = 46,
                            Duration = 40,
                            SessionId = 2
                        },
                        new
                        {
                            Id = 8,
                            ActivityId = 10,
                            Duration = 25,
                            SessionId = 3
                        },
                        new
                        {
                            Id = 9,
                            ActivityId = 6,
                            Duration = 10,
                            SessionId = 3
                        },
                        new
                        {
                            Id = 10,
                            ActivityId = 20,
                            Duration = 15,
                            SessionId = 3
                        },
                        new
                        {
                            Id = 11,
                            ActivityId = 38,
                            Duration = 20,
                            SessionId = 4
                        },
                        new
                        {
                            Id = 12,
                            ActivityId = 55,
                            Duration = 20,
                            SessionId = 4
                        },
                        new
                        {
                            Id = 13,
                            ActivityId = 2,
                            Duration = 10,
                            SessionId = 5
                        },
                        new
                        {
                            Id = 14,
                            ActivityId = 33,
                            Duration = 20,
                            SessionId = 5
                        },
                        new
                        {
                            Id = 15,
                            ActivityId = 13,
                            Duration = 15,
                            SessionId = 5
                        },
                        new
                        {
                            Id = 16,
                            ActivityId = 19,
                            Duration = 20,
                            SessionId = 6
                        },
                        new
                        {
                            Id = 17,
                            ActivityId = 40,
                            Duration = 30,
                            SessionId = 6
                        },
                        new
                        {
                            Id = 18,
                            ActivityId = 5,
                            Duration = 15,
                            SessionId = 6
                        },
                        new
                        {
                            Id = 19,
                            ActivityId = 3,
                            Duration = 10,
                            SessionId = 7
                        },
                        new
                        {
                            Id = 20,
                            ActivityId = 11,
                            Duration = 40,
                            SessionId = 7
                        },
                        new
                        {
                            Id = 21,
                            ActivityId = 49,
                            Duration = 20,
                            SessionId = 7
                        },
                        new
                        {
                            Id = 22,
                            ActivityId = 22,
                            Duration = 30,
                            SessionId = 8
                        },
                        new
                        {
                            Id = 23,
                            ActivityId = 16,
                            Duration = 15,
                            SessionId = 9
                        },
                        new
                        {
                            Id = 24,
                            ActivityId = 51,
                            Duration = 25,
                            SessionId = 10
                        },
                        new
                        {
                            Id = 25,
                            ActivityId = 44,
                            Duration = 30,
                            SessionId = 10
                        });
                });

            modelBuilder.Entity("Unison.Models.ActivityObj", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Details = "Any variation of sustained tone with focus on tone quality and proper technique",
                            Name = "Long-Tones"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Details = "Any variation of Remington exercise across any register",
                            Name = "Remington Exercises"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Details = "Playing mouthpiece only, flexibilty or long tones",
                            Name = "Mouthpiece Exercises"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Details = "Studies out of the Clarke method book, not intended to be played as fast as possible for long tone warm up",
                            Name = "Clarke Studies"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Details = "Choose a pattern and play in all keys",
                            Name = "Scale Patterns"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Details = "Patterns from the Hanon book",
                            Name = "Hanon Patterns"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            Details = "Slowly build speed on using first three fingers on first three frets",
                            Name = "Fret Fingering Pattern"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            Details = "String instruments exercising left hand fingers without support of back thumb",
                            Name = "No Thumb - Left Hand"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            Details = "Major Scales - full range of instrument",
                            Name = "Major"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            Details = "Harmonic Minor - full range of instrument",
                            Name = "Harmonic Minor"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            Details = "Melodic Minor - full range of instrument",
                            Name = "Melodic Minor"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            Details = "Natural Minor - full range of instrument",
                            Name = "Natural Minor"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 4,
                            Details = "Major Chords/Arpeggios - all keys",
                            Name = "Major"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 4,
                            Details = "Dominant Chords/Arpeggios - all keys",
                            Name = "Dominant"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 4,
                            Details = "Minor Chords/Arpeggios - all keys",
                            Name = "Minor"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 4,
                            Details = "Half-Diminished - all keys",
                            Name = "Half-Diminised"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 5,
                            Details = "Practice and/or listen to subtone examples",
                            Name = "Subtone"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 5,
                            Details = "Pratice slow isolated slap tongues and build speed",
                            Name = "Slap Tongue"
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 5,
                            Details = "Practice isolated flutter tongue on one pitch, then add scales, etc.",
                            Name = "Flutter Tongue"
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 5,
                            Details = "Testing alternate fingerings for tricky passages or tonal effects/intonation",
                            Name = "Alternate Fingerings"
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 6,
                            Details = "Pick a 2-5-1 pattern and apply to all keys",
                            Name = "2-5-1 Patterns"
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 6,
                            Details = "Pick a set of changes or tune and walk a bass line over them",
                            Name = "Walk Bass Line"
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 6,
                            Details = "Pick a set of changes or tune to improvise over freely",
                            Name = "Improvise"
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 6,
                            Details = "Listen and mimic high-quality recordings",
                            Name = "Listen"
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 7,
                            Details = "Learn changes, form, melody, lyrics, etc.",
                            Name = "Donna Lee"
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 7,
                            Details = "Learn changes, form, melody, lyric, etc.",
                            Name = "Misty"
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 7,
                            Details = "You can't play guitar unless you play Wonderwall",
                            Name = "Wonderwall"
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 7,
                            Details = "That one George Michael Song",
                            Name = "Careless Whisper"
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 8,
                            Details = "Hummel Concerto for Trumpet",
                            Name = "Hummel Concerto"
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = 8,
                            Details = "Partita for solo vionlin",
                            Name = "Bach Partita in D minor"
                        },
                        new
                        {
                            Id = 31,
                            CategoryId = 8,
                            Details = "John Cage -4'33\" for piano",
                            Name = "Cage 4'33\""
                        },
                        new
                        {
                            Id = 32,
                            CategoryId = 8,
                            Details = "Berio - Sequnza III for solo voice",
                            Name = "Berio Sequenza III"
                        },
                        new
                        {
                            Id = 33,
                            CategoryId = 9,
                            Details = "Mozart String Quartet No. 15",
                            Name = "Mozart String Quartet No. 15"
                        },
                        new
                        {
                            Id = 34,
                            CategoryId = 9,
                            Details = "Ciudades for saxophone quartet - movement II",
                            Name = "Ciudades for Saxophone Quartet"
                        },
                        new
                        {
                            Id = 35,
                            CategoryId = 9,
                            Details = "Poulenc Sonata for four hands",
                            Name = "Poulenc Sonata for four hands"
                        },
                        new
                        {
                            Id = 36,
                            CategoryId = 9,
                            Details = "Six Bagatelles - Ligeti - for Woodwind quintet",
                            Name = "Six Bagatelles"
                        },
                        new
                        {
                            Id = 37,
                            CategoryId = 10,
                            Details = "Ferling 48 Famous Studies Etudes for oboe",
                            Name = "Ferling Etude No. 14"
                        },
                        new
                        {
                            Id = 38,
                            CategoryId = 10,
                            Details = "From the saxophone Voxman Selected Studies book",
                            Name = "Voxman Etude No. 2"
                        },
                        new
                        {
                            Id = 39,
                            CategoryId = 10,
                            Details = "Milde Concert studies for piano - No. 3",
                            Name = "Milde Concert Study 3"
                        },
                        new
                        {
                            Id = 40,
                            CategoryId = 10,
                            Details = "Chopin Etude No. 3 for piano",
                            Name = "Chopin Etude No. 3"
                        },
                        new
                        {
                            Id = 41,
                            CategoryId = 11,
                            Details = "Custom exercises on SRF website",
                            Name = "Sight Reading Factory"
                        },
                        new
                        {
                            Id = 42,
                            CategoryId = 11,
                            Details = "Sight read lines from easier method book",
                            Name = "Intermediate Method"
                        },
                        new
                        {
                            Id = 43,
                            CategoryId = 11,
                            Details = "Sight read new pieces for band class",
                            Name = "New Pieces for band"
                        },
                        new
                        {
                            Id = 44,
                            CategoryId = 11,
                            Details = "Googled sight-reading excerpts for free online",
                            Name = "Googled Random tuba pieces"
                        },
                        new
                        {
                            Id = 45,
                            CategoryId = 12,
                            Details = "Trumpet opening to Mahler Symphony No. 5",
                            Name = "Mahler 5 opening"
                        },
                        new
                        {
                            Id = 46,
                            CategoryId = 12,
                            Details = "Trumpet opening to Promenade from Pictures at an Exhibition by Mussorgsky",
                            Name = "Pictures - Promenade"
                        },
                        new
                        {
                            Id = 47,
                            CategoryId = 12,
                            Details = "Just find something hard in this piece and get better at it",
                            Name = "Symphonie Fantastique"
                        },
                        new
                        {
                            Id = 48,
                            CategoryId = 12,
                            Details = "Don Juan by Strauss - practiced the horn part",
                            Name = "Strauss - Don Juan"
                        },
                        new
                        {
                            Id = 49,
                            CategoryId = 13,
                            Details = "Maslanka Symphony No. 4 for band concert coming up",
                            Name = "Maslanka 4"
                        },
                        new
                        {
                            Id = 50,
                            CategoryId = 13,
                            Details = "Missa Papae Marcelli - by Palestrina for upcoming gig",
                            Name = "Palestrina"
                        },
                        new
                        {
                            Id = 51,
                            CategoryId = 13,
                            Details = "Practice violin 1 part for upcoming concert in Chattanooga",
                            Name = "Beethoven 7"
                        },
                        new
                        {
                            Id = 52,
                            CategoryId = 13,
                            Details = "Practiced my part for our guitar ensemble recital",
                            Name = "Gymnopedie for guitar ensemble"
                        },
                        new
                        {
                            Id = 53,
                            CategoryId = 14,
                            Details = "Learned the Pink Panther theme on kazoo",
                            Name = "Learn Pink Panther"
                        },
                        new
                        {
                            Id = 54,
                            CategoryId = 14,
                            Details = "Learn Mandalorian theme on alto flute",
                            Name = "Learn Mandalorian"
                        },
                        new
                        {
                            Id = 55,
                            CategoryId = 14,
                            Details = "Never gonna give you up",
                            Name = "Learn the Rick-Roll song"
                        },
                        new
                        {
                            Id = 56,
                            CategoryId = 14,
                            Details = "It helps",
                            Name = "Scream Into the Mirror"
                        },
                        new
                        {
                            Id = 57,
                            CategoryId = 15,
                            Details = "Walk, breathe, rest your eyes, whatever you need!",
                            Name = "Take a break"
                        },
                        new
                        {
                            Id = 58,
                            CategoryId = 15,
                            Details = "Stretch to prevent repetitive motion injuries",
                            Name = "Stretch"
                        },
                        new
                        {
                            Id = 59,
                            CategoryId = 15,
                            Details = "As a pre-warm up or warm-down, or if you get frustrated",
                            Name = "Deep-Breathing"
                        },
                        new
                        {
                            Id = 60,
                            CategoryId = 15,
                            Details = "I did it on Bassoon, pick your poison",
                            Name = "Rick-Roll mom"
                        });
                });

            modelBuilder.Entity("Unison.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("Roles")
                        .HasColumnType("text[]");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.HasIndex("TeacherId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "101 Main St.",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = 2,
                            Address = "5531 Broad St.",
                            FirstName = "Teacher 2",
                            IdentityUserId = "e9fd3bbc-17a0-4ba7-857e-e6d695698548",
                            LastName = "Test"
                        },
                        new
                        {
                            Id = 3,
                            Address = "900 Willow Ave.",
                            FirstName = "Suzy",
                            IdentityUserId = "4342d71c-3d92-49ea-9f84-8f3412b65679",
                            LastName = "Bumpkin"
                        },
                        new
                        {
                            Id = 4,
                            Address = "133 W Elm St.",
                            FirstName = "Billy",
                            IdentityUserId = "33ab14e6-cca3-4fb4-84d7-99d45b1c9b05",
                            LastName = "Mack"
                        },
                        new
                        {
                            Id = 5,
                            Address = "6161 Maple St.",
                            FirstName = "Lizzie",
                            IdentityUserId = "b6d8aa7f-ae65-4feb-95ab-377d810bc270",
                            LastName = "McGuire"
                        },
                        new
                        {
                            Id = 6,
                            Address = "775 N Spruce St.",
                            FirstName = "Macy",
                            IdentityUserId = "7c8b955a-c256-4505-bf0f-468489633f5f",
                            LastName = "Greene"
                        },
                        new
                        {
                            Id = 7,
                            Address = "202 SW Poplar Rd.",
                            FirstName = "Tracy",
                            IdentityUserId = "ad6fe687-1ebf-4ef4-9e10-4e23b483140c",
                            LastName = "Moore"
                        },
                        new
                        {
                            Id = 8,
                            Address = "801 Pine St.",
                            FirstName = "Eric",
                            IdentityUserId = "b1df4873-5564-479b-94c0-172f799e820b",
                            LastName = "Linn"
                        },
                        new
                        {
                            Id = 9,
                            Address = "454 Elm St.",
                            FirstName = "Blake",
                            IdentityUserId = "7e60e6dc-579e-43af-9b2a-b4fe5bb42407",
                            LastName = "White"
                        },
                        new
                        {
                            Id = 10,
                            Address = "303 Beech St.",
                            FirstName = "Kyle",
                            IdentityUserId = "a03371b3-edeb-4184-8917-14fa66adb89f",
                            LastName = "Vance"
                        },
                        new
                        {
                            Id = 11,
                            Address = "754 N. Walnut St.",
                            FirstName = "Walter",
                            IdentityUserId = "a541cf62-3506-462f-8901-eee6d9d5145f",
                            LastName = "White"
                        },
                        new
                        {
                            Id = 12,
                            Address = "900 S. Walnut St.",
                            FirstName = "Corey",
                            IdentityUserId = "91a84af5-48ef-4bce-aa4e-7271d83d4d8c",
                            LastName = "Graves"
                        });
                });

            modelBuilder.Entity("Assignment", b =>
                {
                    b.HasOne("Unison.Models.UserProfile", "Musician")
                        .WithMany()
                        .HasForeignKey("MusicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unison.Models.UserProfile", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Musician");

                    b.Navigation("Session");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Comment", b =>
                {
                    b.HasOne("Unison.Models.UserProfile", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("FavoriteSession", b =>
                {
                    b.HasOne("Unison.Models.UserProfile", "Musician")
                        .WithMany()
                        .HasForeignKey("MusicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Musician");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Session", b =>
                {
                    b.HasOne("Unison.Models.UserProfile", "Musician")
                        .WithMany()
                        .HasForeignKey("MusicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Musician");
                });

            modelBuilder.Entity("SessionActivity", b =>
                {
                    b.HasOne("Unison.Models.ActivityObj", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Session", null)
                        .WithMany("SessionActivities")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Unison.Models.ActivityObj", b =>
                {
                    b.HasOne("Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Unison.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Unison.Models.UserProfile", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.Navigation("IdentityUser");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Session", b =>
                {
                    b.Navigation("SessionActivities");
                });
#pragma warning restore 612, 618
        }
    }
}
